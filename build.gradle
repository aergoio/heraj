/*
 * @copyright defined in LICENSE.txt
 */

buildscript {
//  repositories {
//    maven {
//      url "https://plugins.gradle.org/m2/"
//    }
//    google()
//    mavenCentral()
//  }

//  dependencies {
//    classpath "me.champeau.gradle:jmh-gradle-plugin:${jmhPluginVersion}"
}

plugins {
  id "me.champeau.jmh" version "0.6.6"  // micro bmt
}

allprojects {
  apply plugin: 'java-library'
  apply plugin: 'idea'

  repositories {
    mavenLocal()
    mavenCentral()
  }


  /* java-library */

  compileJava.options.encoding = "UTF-8"
  compileTestJava.options.encoding = "UTF-8"

  sourceCompatibility = sourceJavaVersion
  targetCompatibility = targetJavaVersion

  task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    getArchiveClassifier().set('sources')
  }

  javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
      options.addBooleanOption('html5', true)
    }
  }

  task javadocJar(type: Jar) {
    from javadoc
    getArchiveClassifier().set('javadoc')
  }

  artifacts {
    archives sourceJar
    archives javadocJar
  }

  test {
    if (JavaVersion.current().isJava9Compatible()) {
      jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.math=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.nio=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.util=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.util.stream=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.io=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.xml/jdk.xml.internal=ALL-UNNAMED')
    }

    maxParallelForks = Math.max(1, Runtime.runtime.availableProcessors())
    exclude '**/*Tests.class'
    exclude '**/*IT.class'
  }

  task integrationTest(type: Test) {
    if (JavaVersion.current().isJava10Compatible()) {
      jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.math=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.nio=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.util=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.util.stream=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.io=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.xml/jdk.xml.internal=ALL-UNNAMED')
    }

    // note that every *IT class must have own wallet
    maxParallelForks = Math.max(1, Runtime.runtime.availableProcessors())
    include '**/*IT.class'
  }


  /* idea */

  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }

  task copyDependencies(type: Copy) {
    into "$buildDir/dependencies"
    //    from configurations.runtime
    from configurations.runtimeClasspath
  }

}

def javaLibraryProjects = [
    project('core:annotation'),
    project('core:util'),
    project('core:common'),
    project('core:protobuf'),
    project('core:transport'),
    project('client:wallet'),
    project('client:smart-contract')
]

configure(javaLibraryProjects) {
  apply plugin: 'jacoco'                  // coverage
  apply plugin: 'checkstyle'              // lint

  def projectBaseName = 'heraj-' + project.name

  dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"

    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation("org.powermock:powermock-api-mockito2:${powerMockVersion}") {
      exclude group: 'org.mockito', module: 'mockito-core'
    }
    testImplementation "org.powermock:powermock-module-junit4:${powerMockVersion}"
  }


  /* checkstyle */

  checkstyle {
    toolVersion checkstyleVersion
    sourceSets = [project.sourceSets.main]
    configFile = file("${project.rootProject.projectDir}/styles.xml")
  }

  task lint {
    dependsOn check
  }


  /* jacoco */

  jacoco {
    toolVersion jacocoVersion
  }

  // need test task before executing
  jacocoTestReport {
    group = "Reporting"
    getAdditionalSourceDirs().setFrom(sourceSets.main.allSource.srcDirs)
    getSourceDirectories().setFrom(sourceSets.main.allSource.srcDirs)
    getClassDirectories().setFrom(sourceSets.main.output.classesDirs)
    reports {
      xml.enabled true
      html.enabled true
      csv.enabled false
    }
  }

  task coverage {
    dependsOn jacocoTestReport
  }


  jar {
    archivesBaseName = projectBaseName
  }




  /* jmh */

  jmh {
    fork = 2
    benchmarkMode = ['thrpt']
    resultFormat = 'JSON'
    timeUnit = 's'
    threads = 2 * Runtime.runtime.availableProcessors()
//    jmhVersion = '1.21'
    duplicateClassesStrategy = org.gradle.api.file.DuplicatesStrategy.WARN
  }

}


// root project
project(":") {
  apply plugin: 'jacoco'         // coverage
  apply plugin: 'maven-publish'           // maven
  apply plugin: 'signing'                 //

  task allcoverage(type: JacocoReport) {
    def targetProjects = javaLibraryProjects.findAll {
      it.name != 'annotation' && it.name != 'protobuf'
    }
    dependsOn = targetProjects.coverage
    getSourceDirectories().setFrom(targetProjects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().setFrom(targetProjects.sourceSets.main.output.classesDirs)
    getExecutionData().setFrom(targetProjects.jacocoTestReport.executionData)
    reports {
      html.enabled = true
      xml.enabled = true
      xml.destination file("${buildDir}/reports/jacoco/report.xml")
      csv.enabled = false
    }
    afterEvaluate {
      getClassDirectories().setFrom(classDirectories.files.collect {
        fileTree(dir: it, exclude: ['types/**'])
      })
    }
  }

  task alljavadoc(type: Javadoc) {
    def targetProjects = javaLibraryProjects.findAll {
      it.name != 'protobuf'
    }
    source targetProjects.collect { it.sourceSets.main.allJava }
    classpath = files(targetProjects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
    if (JavaVersion.current().isJava8Compatible()) {
      options.addStringOption('Xwerror', '-quiet')
    }
    if (JavaVersion.current().isJava9Compatible()) {
      options.addBooleanOption('html5', true)
    }
  }

  /* maven-publish */
  publishing {
    publications {
      maven(MavenPublication) {
        groupId = project.group
//        artifactId = projectBaseName
        version = project.version

        from components.java
        artifact sourceJar
        artifact javadocJar
      }

      mavenJava(MavenPublication) {
        pom {
          name = 'heraj'
          packaging = 'jar'
          // optionally artifactId can be defined here
          description = 'A java SDK for accessing blockchain Aergo.'
          url = 'https://github.com/aergoio/heraj'

          scm {
            connection = 'scm:git:https://github.com/aergoio/heraj.git'
            developerConnection = 'scm:git:https://github.com/aergoio/heraj.git'
            url = 'https://github.com/aergoio/heraj'
          }

          licenses {
            license {
              name ='MIT'
              url = 'https://github.com/aergoio/heraj/blob/develop/LICENSE.txt'
            }
          }

          developers {
            developer {
              id = 'hayarobi'
              name = 'Hayarobi Park'
              email = 'hayarobipark@gmail.com'
            }
            developer {
              id = 'acktsap'
              name = 'Taeik Lim'
              email = 'sibera21@gmail.com'
            }
            developer {
              id = 'bylee'
              name = 'bonyong lee'
              email = 'bylee78@gmail.com'
            }
          }
        }
      }

    }

    repositories {
      maven {
        def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
            username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
            password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
        }
      }
    }

  }

  signing {
      sign publishing.publications.mavenJava
  }
//  tasks.withType(Sign) {
//      onlyIf { isReleaseVersion }
//  }

  javadoc {
      if(JavaVersion.current().isJava9Compatible()) {
          options.addBooleanOption('html5', true)
      }
  }


}
