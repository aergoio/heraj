/*
 * @copyright defined in LICENSE.txt
 */
plugins {
  id 'io.aergo.heraj.java-common-conventions'
}

def javaLibraryProjects = [
    project('core:annotation'),
    project('core:util'),
    project('core:common'),
    project('core:protobuf'),
    project('core:transport'),
    project('client:wallet'),
    project('client:smart-contract')
]
subprojects {
  apply plugin: 'java'
}


// root project
project(":") {
  // root project is for aggregated javadocs and coverage report only
  jar.enabled = false
  javadoc.enabled = false
  javadocJar.enabled = false
  javadoc.enabled = false
  sourceJar.enabled = false

//  task allcoverage(type: JacocoReport) {
//    def targetProjects = javaLibraryProjects.findAll {
//      it.name != 'annotation' && it.name != 'protobuf'
//    }
//    dependsOn = targetProjects.coverage
//    getSourceDirectories().setFrom(targetProjects.sourceSets.main.allSource.srcDirs)
//    getClassDirectories().setFrom(targetProjects.sourceSets.main.output.classesDirs)
//    getExecutionData().setFrom(targetProjects.jacocoTestReport.executionData)
//    reports {
//      html.enabled = true
//      xml.enabled = true
//      xml.destination file("${buildDir}/reports/jacoco/report.xml")
//      csv.enabled = false
//    }
//    afterEvaluate {
//      getClassDirectories().setFrom(classDirectories.files.collect {
//        fileTree(dir: it, exclude: ['types/**'])
//      })
//    }
//  }

  task alljavadoc(type: Javadoc, group: 'Documentation') {
    def targetProjects = javaLibraryProjects.findAll {
      it.name != 'protobuf'
    }
    source targetProjects.collect {it.sourceSets.main.allJava }
    classpath = files(targetProjects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
    if (java.toolchain.languageVersion.get().canCompileOrRun(JavaLanguageVersion.of("8"))) {
      options.addStringOption('Xwerror', '-quiet')
    }
  }

}
