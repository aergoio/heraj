/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // Apply the java Plugin to add support for Java.
    id 'java' apply false
    id 'idea'
}

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType(JavaCompile) {
    //enable compilation in a separate daemon process
    options.compilerArgs += ['-parameters']
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


// versions of commonly dependent libraries. NOTE: versions of libraries is decleared in gradle.properties
ext {
}

/* idea */
idea {
  module {
    outputDir file('build/classes/java/main')
    testOutputDir file('build/classes/java/test')
  }
}


dependencies {
    constraints {
        // Define dependency versions as constraints
        implementation 'org.apache.commons:commons-text:1.9'

        implementation "com.google.guava:guava:${guavaVersion}-android"

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        // http callback
//        implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
//        testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"

        implementation "com.fasterxml.jackson:jackson-bom:${jacksonVersion}"

        // unit test

        // logging
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"
        runtimeOnly "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
        runtimeOnly "ch.qos.logback:logback-core:${logbackVersion}"
        runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"

    }
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}


repositories {
  mavenLocal()
  mavenCentral()
}


/* java-library */

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceCompatibility = sourceJavaVersion
targetCompatibility = targetJavaVersion

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  getArchiveClassifier().set('sources')
}

javadoc {
  if (java.toolchain.languageVersion.get().canCompileOrRun(JavaLanguageVersion.of("9"))) {
    options.addBooleanOption('html5', true)
  }
}

task javadocJar(type: Jar) {
  from javadoc
  getArchiveClassifier().set('javadoc')
}

artifacts {
  archives sourceJar
  archives javadocJar
}

test {
  if (JavaVersion.current().isJava9Compatible()) {
    jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.math=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.nio=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.util=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.util.stream=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.io=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.xml/jdk.xml.internal=ALL-UNNAMED')
  }

  maxParallelForks = Math.max(1, Runtime.runtime.availableProcessors())
  exclude '**/*Tests.class'
  exclude '**/*IT.class'
}

task integrationTest(type: Test) {
  if (JavaVersion.current().isJava10Compatible()) {
    jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.math=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.nio=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.util=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.util.stream=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.io=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.xml/jdk.xml.internal=ALL-UNNAMED')
  }

  // note that every *IT class must have own wallet
  maxParallelForks = Math.max(1, Runtime.runtime.availableProcessors())
  include '**/*IT.class'
}


/* idea */

idea {
  module {
    outputDir file('build/classes/java/main')
    testOutputDir file('build/classes/java/test')
  }
}

task copyDependencies(type: Copy) {
  into "$buildDir/dependencies"
  //    from configurations.runtime
  from configurations.runtimeClasspath
}
